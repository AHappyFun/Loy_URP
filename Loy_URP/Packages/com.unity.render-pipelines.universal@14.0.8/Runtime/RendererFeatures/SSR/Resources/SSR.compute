// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SSRMain

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareNormalsTexture.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareOpaqueTexture.hlsl"

RWTexture2D<float3> _SSRTextureUAV;

//TEXTURE2D(_InputTexture);
//SAMPLER(sampler_InputTexture);

float _SSRMaxRayMarchStep;
float _SSRMaxRayMarchDistance;
float _SSRMaxRayMarchStepSize;
float _SSRDepthThickness;


float3 SampleSourceColor(float2 screenPos)
{
    return SAMPLE_TEXTURE2D_LOD(_CameraOpaqueTexture, sampler_CameraOpaqueTexture, screenPos, 0).rgb;
}

float SampleDepth(float2 uv)
{
    return SAMPLE_TEXTURE2D_X_LOD(_CameraDepthTexture,sampler_CameraDepthTexture, uv, 0).r;    
}

float3 SampleNormals(float2 uv)
{
    return SAMPLE_TEXTURE2D_LOD(_CameraNormalsTexture, sampler_CameraNormalsTexture, uv, 0).rgb * 2 - 1; 
}

//检查是否
bool CheckDepthCollision(float3 viewPos, out float2 screenPos, out float depth)
{
    float4 clipPos = mul(UNITY_MATRIX_P, float4(viewPos, 1.0));

    float2 ndc = clipPos.xy / clipPos.w;

    screenPos = ndc * 0.5 + 0.5;

    depth = SampleDepth(screenPos);
    
#if UNITY_REVERSED_Z
    depth = 1- depth;
#endif
    
    depth = LinearEyeDepth(depth, _ZBufferParams);
    
    return screenPos.x > 0
        && screenPos.y > 0
        && screenPos.x < 1.0
        && screenPos.y < 1.0
        && depth < - viewPos.z
        && depth + _SSRDepthThickness > - viewPos.z; 
}


bool ViewSpaceRayMarch(float3 rayOriPos, float3 rayDir, out float2 hitScreenPos, out float depth)
{
    if(rayDir.z > 0)
    {
        return false;
    }
    
    int maxStep = _SSRMaxRayMarchStep;

    UNITY_LOOP
    for (int i = 0; i < maxStep; i++)
    {
        //前进一步
        float3 currentPos = rayOriPos + rayDir * _SSRMaxRayMarchStepSize * i;

        //最大距离判断
        if(length(rayOriPos - currentPos) > _SSRMaxRayMarchDistance)
            return false;

        if(CheckDepthCollision(currentPos, hitScreenPos, depth))
        {
            return true;
        }
        
    }

    return false;
}

[numthreads(8, 8, 1)]
void SSRMain (uint2 dispatchThreadId : SV_DispatchThreadID)
{
    if(dispatchThreadId.x > _ScreenSize.x || dispatchThreadId.y > _ScreenSize.y)
        return;
    
    uint2 pixelCoord = dispatchThreadId;

    float2 pixelUV = pixelCoord / _ScreenParams.xy;
    
    float depth = SampleDepth(pixelUV);

    depth = Linear01Depth(depth, _ZBufferParams);
    
#if UNITY_REVERSED_Z
    depth = 1.0 - depth;
#else
    depth = 2.0 * depth - 1.0;
#endif
    
    float3 viewPos = ComputeViewSpacePosition(pixelUV, depth, unity_MatrixInvP);
    viewPos.z = - viewPos.z;
    
    float3 viewDir = normalize(viewPos);
    viewDir = mul(UNITY_MATRIX_V, viewDir);
    
    float3 viewNormal = SampleNormals(pixelUV);
    viewNormal = TransformWorldToViewDir(viewNormal);

    float3 reflectDir = normalize(reflect(viewDir, viewNormal));

    float2 hitScreenPos = float2(0,0);

    float3 currColor = SampleSourceColor(pixelUV);

    
    float d = 0;
    if(ViewSpaceRayMarch(viewPos, reflectDir, hitScreenPos, d))
    {
       currColor = SampleSourceColor(hitScreenPos);       
    }
    
    _SSRTextureUAV[pixelCoord].rgb = currColor;
}
